window.addEventListener("load", (() => { loadLoader(), loadSwiperSlider(), loadMetismenu(), loadTippy(), loadIziToast(), loadNiceSelect2(), loadRaterJS(), loadMixitup() })); let step_counter = 0; element = document.querySelectorAll(".step-container"), element && element.forEach((e => { const t = e.querySelectorAll(".step-content"), l = e.querySelectorAll(".btn-prev-step"), s = e.querySelectorAll(".btn-next-step"), c = e.querySelectorAll(".progressbar div"); l.forEach((e => { e.addEventListener("click", (e => { step_counter--, stepUpdate(t, step_counter, c, "prev") })) })), s.forEach((e => { e.addEventListener("click", (e => { step_counter++, stepUpdate(t, step_counter, c, "next") })) })) })), stepUpdate = (e, t, l, s) => { const c = e[t].closest(".step-container").querySelectorAll(".step-number div"); e.forEach((e => { e.classList.remove("active") })), e[t].classList.add("active"), "next" == s && l[t - 1].classList.replace("w-0", "w-full"), "prev" == s && l[t].classList.replace("w-full", "w-0"), "next" == s && c[t].classList.add("active"), "prev" == s && c[t + 1].classList.remove("active") }, element = document.querySelectorAll(".btn-reset-progressbar"), element && element.forEach((e => { e.addEventListener("click", (e => { const t = e.currentTarget; setTimeout((() => { const e = document.querySelector(t.getAttribute("data-target")), l = e.querySelectorAll(".progressbar div"), s = e.querySelectorAll(".step-number div"), c = e.querySelectorAll(".step-content"); l.forEach((e => { e.classList.replace("w-full", "w-0") })), c.forEach(((e, t) => { e.classList.remove("active"), s[t].classList.remove("active") })), step_counter = 0, c[0].classList.add("active"), s[0].classList.add("active") }), 300) })) })), element = document.querySelectorAll(".btn-see-more"), element && element.forEach((e => { e.addEventListener("click", (e => { const t = e.currentTarget.closest(".see-more"), l = t.querySelector(".see-more-container"), s = t.querySelector(".see-more-content"), c = t.querySelector("i"); l.classList.toggle("gradient-bottom"), c.classList.toggle("rotate-180"), l.style.transition = "max-height 1s ease", l.style.maxHeight = s.offsetHeight + "px"; let n = l.style.transitionDuration; n.includes("ms") ? n = parseInt(n) : n.includes("s") && (n = 1e3 * parseFloat(n)), c.classList.contains("rotate-180") ? setTimeout((() => l.style.maxHeight = "max-content"), n) : setTimeout((() => l.style.maxHeight = ""), 10) })) })); const tabs_container = document.querySelectorAll(".tabs-container"); tabs_container.forEach((e => { const t = e.querySelectorAll(".btn-tabs"), l = e.querySelectorAll(".tab-content"); t && t.forEach(((e, s) => { e.addEventListener("click", (c => { t.forEach(((e, t) => { l[t].style.cssText = "", l[t].classList.remove("active"), e.classList.remove("active") })), l[s].style.cssText = "transition : all .8s ease", l[s].classList.add("active"), e.classList.add("active") })) })) })), element = document.querySelector(".btn-search-mob"), element && element.addEventListener("click", (e => { document.querySelector(".header-search").classList.toggle("hidden") })), element = document.querySelectorAll(".btn-close-modal"), element && element.forEach((e => { e.addEventListener("click", (e => { const t = e.target.closest(".modal"), l = t.querySelector(".modal-content"), s = t.querySelector(".tab-content.active"); document.body.classList.remove("overflow-hidden"), t.classList.replace("opacity-100", "opacity-0"), t.classList.replace("visible", "invisible"), l.classList.contains("scale-100") && (l.classList.replace("scale-100", "scale-0"), l.classList.replace("opacity-100", "opacity-0")), l.classList.contains("right-0") && l.classList.replace("right-0", "right-[-999px]"), l.classList.contains("left-0") && l.classList.replace("left-0", "left-[-999px]"), s && setTimeout((() => s.classList.remove("active")), 300) })) })), element = document.querySelectorAll(".quantity"), element && element.forEach((e => { const t = e.querySelector(".quantity-value"); e.querySelectorAll(".quantity-btn").forEach((e => { e.addEventListener("click", (e => { const l = e.currentTarget.classList; l.contains("increment") && t.value++, l.contains("decrement") && t.value > 0 && t.value-- })) })) })), element = document.querySelectorAll(".input-number"), element && element.forEach((e => { e.addEventListener("onpaste", (e => e.preventDefault())), e.addEventListener("keydown", (e => { if (isNaN(parseInt(e.key)) && 8 != e.keyCode) return e.preventDefault() })) })), element = document.querySelector(".btn-gotop"), element && element.addEventListener("click", (e => { window.scrollTo({ top: 0, behavior: "smooth" }) })), element = document.querySelector("#check-all"), element && element.addEventListener("click", (e => { const t = e.currentTarget; document.querySelectorAll(".check-product").forEach((e => { t.checked ? e.checked = !0 : e.checked = !1 })) })), window.addEventListener("click", (e => { if (e.target.classList.contains("btn-open-modal")) { const t = e.target, l = document.querySelector(t.getAttribute("data-target")); document.body.classList.add("overflow-hidden"), calculatePositionTab(t), showModal(l) } if (e.target.classList.contains("btn-toggle-modal")) { const t = e.target, l = document.querySelector(t.getAttribute("data-target")); t.closest(".modal").querySelector(".btn-close-modal").click(), document.body.classList.add("overflow-hidden"), showModal(l) } else if (e.target.classList.contains("btn-wishlist")) { const t = e.target.children[0]; t.classList.contains("bi-heart") ? (t.classList.replace("bi-heart", "bi-heart-fill"), t.classList.add("text-red-400", "heartscale")) : (t.classList.replace("bi-heart-fill", "bi-heart"), t.classList.remove("text-red-400", "heartscale")) } if (e.target.classList.contains("check-product")) { const t = document.querySelector("#check-all"), l = document.querySelectorAll(".check-product"), s = e.target.id; let c; c = s.search("desktop") >= 0 ? s.replace("desktop", "mobile") : s.replace("mobile", "desktop"); const n = document.querySelector(`#${c}`); e.target.checked ? n.checked = !0 : n.checked = !1; document.querySelectorAll(".check-product:checked").length === l.length ? t.checked = !0 : t.checked = !1 } })), window.addEventListener("resize", (e => { if (e.target.innerWidth > 1023) { const e = document.querySelector(".menu-mob.visible .btn-close-modal"); e && e.click() } })), window.addEventListener("scroll", (e => { if (window.scrollY > 500) { const e = document.querySelector(".btn-gotop"); e.classList.replace("bottom-[-999px]", "bottom-10"), e.classList.replace("opacity-0", "opacity-100"), e.classList.replace("invisible", "visible") } else { const e = document.querySelector(".btn-gotop"); e.classList.replace("bottom-10", "bottom-[-999px]"), e.classList.replace("opacity-100", "opacity-0"), e.classList.replace("visible", "invisible") } })), calculatePositionTab = e => { if (!e.hasAttribute("data-tab")) return; const t = e.getAttribute("data-tab"); document.querySelectorAll(".entry-modal .btn-tabs")[t].click() }, showModal = e => { const t = e.querySelector(".modal-content"); e.classList.replace("opacity-0", "opacity-100"), e.classList.replace("invisible", "visible"), t.classList.contains("scale-0") && (t.classList.replace("scale-0", "scale-100"), t.classList.replace("opacity-0", "opacity-100"), t.classList.add("opacity-transform")), t.classList.contains("right-[-999px]") ? t.classList.replace("right-[-999px]", "right-0") : t.classList.contains("left-[-999px]") && t.classList.replace("left-[-999px]", "left-0") }, loadLoader = () => { setTimeout((() => { document.querySelector(".loader-content").classList.add("transition-all", "duration-500", "opacity-0", "invisible") }), 500), setTimeout((() => { const e = document.querySelector(".loader"), t = document.querySelector("body"); e.classList.add("transition-all", "duration-1000", "opacity-0", "invisible"), t.classList.remove("overflow-hidden") }), 800) }, loadSwiperSlider = () => { element = document.querySelector(".swiper"), element && new Swiper(".swiper-banner", { spaceBetween: 30, centeredSlides: !0, loop: !0, effect: "fade", fadeEffect: { crossFade: !0 }, autoplay: { delay: 3500, disableOnInteraction: !1 }, pagination: { el: ".swiper-pagination", clickable: !0 }, navigation: { nextEl: ".button-next", prevEl: ".button-prev" } }), element && new Swiper(".swiper-default", { spaceBetween: 30, centeredSlides: !0, loop: !0, pagination: { el: ".swiper-pagination", clickable: !0 } }), element && new Swiper(".swiper-cards", { slidesPerView: 1, spaceBetween: 20, freeMode: !0, loop: !0, autoplay: { delay: 5e3, disableOnInteraction: !1 }, breakpoints: { 560: { slidesPerView: 2, spaceBetween: 20 }, 760: { slidesPerView: 3, spaceBetween: 20 }, 1280: { slidesPerView: 4, spaceBetween: 20 } }, navigation: { nextEl: ".button-next", prevEl: ".button-prev" } }), element && new Swiper(".swiper-cards-2", { slidesPerView: 1, spaceBetween: 20, freeMode: !0, loop: !0, autoplay: { delay: 5e3, disableOnInteraction: !1 }, breakpoints: { 560: { slidesPerView: 2, spaceBetween: 20 }, 760: { slidesPerView: 3, spaceBetween: 20 } }, navigation: { nextEl: ".button-next", prevEl: ".button-prev" } }), element && new Swiper(".swiper-brands", { slidesPerView: 1, spaceBetween: 30, freeMode: !0, loop: !0, autoplay: { delay: 2e3, disableOnInteraction: !1 }, breakpoints: { 340: { slidesPerView: 2, spaceBetween: 20 }, 440: { slidesPerView: 3, spaceBetween: 20 }, 540: { slidesPerView: 4, spaceBetween: 20 }, 640: { slidesPerView: 5, spaceBetween: 20 }, 640: { slidesPerView: 7, spaceBetween: 20 } }, navigation: { nextEl: ".button-next", prevEl: ".button-prev" } }), element = document.querySelectorAll(".swiper-thumbs"), swipper_top = document.querySelectorAll(".swiper-top"), element && element.forEach(((e, t) => { if (!e) return; const l = new Swiper(e, { spaceBetween: 10, slidesPerView: 4, freeMode: !0, watchSlidesProgress: !0 }), s = new Swiper(swipper_top[t], { spaceBetween: 10, effect: "fade", allowTouchMove: !1, zoom: { maxRatio: 2, toggle: !0 }, fadeEffect: { crossFade: !0 }, navigation: { nextEl: ".button-next", prevEl: ".button-prev" }, thumbs: { swiper: l } }); s.slides.forEach((e => { e.addEventListener("mouseover", (function (e) { s.zoom.in() })), e.addEventListener("mouseout", (function (e) { s.zoom.out() })) })) })) }, loadMetismenu = () => { element = document.querySelectorAll(".metismenu"), element && element.forEach((e => { e && new MetisMenu(e, { triggerElement: ".metismenu-btn", subMenu: ".metismenu-content" }) })) }, loadTippy = () => { element = document.querySelector(".tippy"), element && tippy(".tippy-wishlist", { content: "Add to wishlist" }), element && tippy(".tippy-remove", { content: "Remove" }), element && tippy(".tippy-edit", { content: "Edit" }), element && tippy(".tippy-left-wishlist", { placement: "left", content: "Add to wishlist" }), element && tippy(".tippy-left-card-view", { placement: "left", content: "Quick view", zIndex: 1 }), element = document.querySelector(".tippy"), element && tippy(".tippy-grid", { content: "Grid view" }), element = document.querySelector(".tippy"), element && tippy(".tippy-list", { content: "List view" }) }, loadIziToast = () => { element = document.querySelector(".form-leave-message"), element && element.addEventListener("submit", (e => { iziToast.show({ message: "Message sent successfully!", position: "topRight", color: "rgb(34 197 94 / 70%", icon: "bi-check-circle-fill", iconColor: "#fff", titleColor: "#fff", messageColor: "#fff" }) })), element = document.querySelector(".resend-code"), element && element.addEventListener("click", (e => { iziToast.show({ message: "The code has been resent", position: "topRight", color: "rgb(34 197 94 / 70%", icon: "bi-check-circle-fill", iconColor: "#fff", titleColor: "#fff", messageColor: "#fff" }) })) }, loadNiceSelect2 = () => { element = document.querySelectorAll(".nice-select"), element && element.forEach((e => { e.classList.contains("country") && NiceSelect.bind(e, { placeholder: "Country" }), e.classList.contains("order-by") && NiceSelect.bind(e, { placeholder: "Order by" }), e.classList.contains("card-payment") && NiceSelect.bind(e, { placeholder: "Card" }) })) }, loadRaterJS = () => { if (element = document.querySelector("#rater"), !element) return; let e = raterJs({ element: element, rateCallback: function (e, t) { this.setRating(e), t() }, starSize: 32, step: .5 }); const t = document.querySelector(".form-review"); t && t.addEventListener("submit", (t => { document.querySelector(".rating-value").value = e.getRating() })) }, loadMixitup = () => { if (element = document.querySelector(".mix-elements"), !element) return; const e = { load: { filter: element.classList.contains("mix-all") ? ".mix-main" : "all" } }; mixitup(element, e) };